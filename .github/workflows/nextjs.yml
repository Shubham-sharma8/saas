name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16" # It's recommended to use the LTS version of Node.js
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with Next.js
        run: npm run build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './out' # Make sure this path matches the output directory of your Next.js build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
Make sure that your package.json contains the correct scripts for building your Next.js application. Typically, a build script is defined as "build": "next build". If you are using Next.js 12 or newer and you have a static site, you should make use of the output: 'standalone' configuration in your next.config.js file, as previously mentioned.

Remember that if you are using Next.js 12 or newer, the next export command is deprecated. Instead, you should configure your Next.js application to support static generation through your next.config.js and page-level static generation settings.

After updating your workflow file, commit and push the changes to your repository to trigger the GitHub Actions workflow. This will build and deploy your Next.js site using npm commands.
